# -------------------------------
# AuthPackage – CI (release branch)
# -------------------------------

# Human-friendly run name:
name: authpkg_release_$(Date:yyyyMMdd).$(Rev:r)

trigger:
  branches:
    include:
      - release

pr:
  branches:
    include:
      - release

pool:
  vmImage: macos-latest

variables:
  # Build mode for swift build (we build once more after tests)
  CONFIG: release

  # Sonar toggle (leave 'false' until the extension + service connection exist)
  SONAR_ENABLED: 'false'
  SONARQ_ENDPOINT: 'sonarqube-authpackage'
  SONAR_PROJECT_KEY: 'authpackage'
  SONAR_PROJECT_NAME: 'AuthPackage'

steps:
  - checkout: self
    fetchDepth: 0
    displayName: "Checkout repository"

  - script: |
      set -euo pipefail
      echo "Swift toolchain:"
      swift --version
      echo "Xcode:"
      xcodebuild -version
    displayName: "Show toolchain versions"

  - script: |
      set -euo pipefail
      echo "Running SwiftPM tests with coverage…"
      swift test --enable-code-coverage

      # Locate coverage profile (newer toolchains)
      if swift test --show-codecov-path >/dev/null 2>&1; then
        CODECOV_JSON_PATH=$(swift test --show-codecov-path | tail -n1)
        PROF_DIR=$(dirname "$CODECOV_JSON_PATH")
        PROF="$PROF_DIR/default.profdata"
      else
        # Fallback path used by SwiftPM
        PROF=".build/debug/codecov/default.profdata"
      fi

      # Test runner binary for llvm-cov
      if swift test --show-test-binary-path >/dev/null 2>&1; then
        TEST_BIN=$(swift test --show-test-binary-path)
      else
        TEST_BIN=$(find .build -type f -name '*Tests' -perm -111 2>/dev/null | head -n1)
      fi

      echo "Coverage profile: $PROF"
      echo "Test binary: $TEST_BIN"

      # Produce LCOV so Sonar can ingest later
      xcrun llvm-cov export -format=lcov -instr-profile "$PROF" "$TEST_BIN" > coverage.lcov
      echo "Wrote coverage.lcov"
    displayName: "Build & test (with coverage)"

  # ---- SonarQube (excluded at compile-time until SONAR_ENABLED == 'true') ----
  - ${{ if eq(variables.SONAR_ENABLED, 'true') }}:
    - task: SonarQubePrepare@6
      displayName: "SonarQube | Prepare analysis"
      inputs:
        SonarQube: '$(SONARQ_ENDPOINT)'
        scannerMode: 'CLI'
        configMode: 'file'   # uses sonar-project.properties in repo
        cliProjectKey: '$(SONAR_PROJECT_KEY)'
        cliProjectName: '$(SONAR_PROJECT_NAME)'

    - task: SonarQubeAnalyze@6
      displayName: "SonarQube | Run analysis"

    - task: SonarQubePublish@6
      displayName: "SonarQube | Publish Quality Gate"
      inputs:
        pollingTimeoutSec: '300'
  # ---------------------------------------------------------------------------

  - script: |
      set -euo pipefail
      echo "Building package in release mode…"
      swift build -c "$(CONFIG)"
    displayName: "Build package (release)"
    condition: succeeded()   # only if tests passed

  - script: |
      set -euo pipefail
      echo "Packaging source artifact…"
      rm -rf dist && mkdir -p dist/pkg

      cp -a Package.swift dist/pkg/
      [ -f Package.resolved ] && cp Package.resolved dist/pkg/ || true
      [ -d Sources ] && cp -a Sources dist/pkg/ || true
      [ -f README.md ] && cp README.md dist/pkg/ || true
      [ -f LICENSE ] && cp LICENSE dist/pkg/ || true
      [ -f coverage.lcov ] && cp coverage.lcov dist/pkg/ || true

      SHORT="${BUILD_SOURCEVERSION:0:7}"
      BRANCH="${BUILD_SOURCEBRANCHNAME//\//-}"
      pushd dist >/dev/null
      zip -rq "AuthPackage_src_${BRANCH}_${SHORT}.zip" pkg
      popd >/dev/null

      echo "Created dist/AuthPackage_src_${BRANCH}_${SHORT}.zip"
    displayName: "Create source artifact (.zip)"
    condition: succeeded()

  - task: PublishPipelineArtifact@1
    displayName: "Publish artifact: AuthPackage (source zip)"
    condition: succeeded()
    inputs:
      targetPath: 'dist'
      artifact: 'AuthPackage'
