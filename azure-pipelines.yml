# -------------------------------
# AuthPackage – CI (release branch)
# -------------------------------

# Human-friendly run name:
name: authpkg_release_$(Date:yyyyMMdd).$(Rev:r)

trigger:
  branches:
    include:
      - release

pr:
  branches:
    include:
      - release

pool:
  vmImage: macos-latest

variables:
  # Build mode for swift build (we build once more after tests)
  CONFIG: release

  # Sonar toggle (leave 'false' until the extension + service connection exist)
  SONAR_ENABLED: 'true'
  SONARQ_ENDPOINT: 'sonarqube-authpackage'
  SONAR_ORG: "ciscodeapps"
  SONAR_PROJECT_KEY: 'CISCODEAPPS_pkg-ios-auth'
  SONAR_PROJECT_NAME: 'pkg-ios-auth'

  # ---- Azure Artifacts feed (only needed if/when you publish to feed) ----
  FEED_PATH: '$(System.TeamProject)/ios-packages'   # Project-scoped feed path (ProjectName/FeedName)
  PACKAGE_NAME: 'authpackage'
  
  # Will be overridden by the "Resolve package version" step
  PACKAGE_VERSION: '0.0.0-rc.0'

steps:
  - checkout: self
    fetchDepth: 0
    displayName: "Checkout repository"

  # Compute SemVer:
  # - If building a tag 'vX.Y.Z' => version 'X.Y.Z'
  # - Else on 'release' branch   => 'NEXT_MINOR.0-rc.YYYYMMDD.BUILDID'
  - script: |
      set -euo pipefail

      REF="${BUILD_SOURCEBRANCH}"

      # Helper: parse last tag safely
      get_last_tag() {
        git describe --tags --abbrev=0 --match 'v[0-9]*' 2>/dev/null || true
      }

      if [[ "$REF" == refs/tags/v* ]]; then
        VER="${REF#refs/tags/v}"
        CHANNEL="stable"
      else
        LAST_TAG="$(get_last_tag)"
        if [[ -z "$LAST_TAG" ]]; then
          MAJ=0; MIN=0; PAT=0
        else
          BASE="${LAST_TAG#v}"
          IFS=. read -r MAJ MIN PAT <<< "$BASE"
        fi
        NEXT="${MAJ}.$((MIN+1)).0"
        DATE="$(date +%Y%m%d)"
        VER="${NEXT}-rc.${DATE}.${BUILD_BUILDID}"
        CHANNEL="rc"
      fi

      echo "Resolved PACKAGE_VERSION=$VER (channel=$CHANNEL)"
      echo "##vso[task.setvariable variable=PACKAGE_VERSION]$VER"
      echo "##vso[task.setvariable variable=RELEASE_CHANNEL]$CHANNEL"
    displayName: "Resolve package version (SemVer + rc)"

  - script: |
      set -euo pipefail
      echo "Swift toolchain:"
      swift --version
      echo "Xcode:"
      xcodebuild -version
    displayName: "Show toolchain versions"

  - script: |
      set -euo pipefail
      echo "Running SwiftPM tests with coverage…"
      swift test --enable-code-coverage

      # Locate coverage profile (newer toolchains)
      if swift test --show-codecov-path >/dev/null 2>&1; then
        CODECOV_JSON_PATH=$(swift test --show-codecov-path | tail -n1)
        PROF_DIR=$(dirname "$CODECOV_JSON_PATH")
        PROF="$PROF_DIR/default.profdata"
      else
        # Fallback path used by SwiftPM
        PROF=".build/debug/codecov/default.profdata"
      fi

      # Test runner binary for llvm-cov
      if swift test --show-test-binary-path >/dev/null 2>&1; then
        TEST_BIN=$(swift test --show-test-binary-path)
      else
        TEST_BIN=$(find .build -type f -name '*Tests' -perm -111 2>/dev/null | head -n1)
      fi

      echo "Coverage profile: $PROF"
      echo "Test binary: $TEST_BIN"

      # Produce LCOV so Sonar (or others) can ingest later
      xcrun llvm-cov export -format=lcov -instr-profile "$PROF" "$TEST_BIN" > coverage.lcov
      echo "Wrote coverage.lcov"
    displayName: "Build & test (with coverage)"
    
# Convert LCOV to Cobertura XML for Azure DevOps UI
  - script: |
      set -euo pipefail
      python3 -m pip install --user lcov_cobertura
      python3 -m lcov_cobertura coverage.lcov --output coverage.cobertura.xml
      echo "Wrote coverage.cobertura.xml"
    displayName: "Convert coverage: LCOV → Cobertura XML"

# Publish to the Code Coverage tab
  - task: PublishCodeCoverageResults@2
    displayName: "Publish code coverage (Cobertura)"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: 'coverage.cobertura.xml'
      failIfCoverageEmpty: false
      
  - script: |
      set -euo pipefail
      mkdir -p coverage-html
      # You already found $PROF and $TEST_BIN above — reuse the logic or recompute here if needed
      if swift test --show-codecov-path >/dev/null 2>&1; then
        CODECOV_JSON_PATH=$(swift test --show-codecov-path | tail -n1)
        PROF_DIR=$(dirname "$CODECOV_JSON_PATH")
        PROF="$PROF_DIR/default.profdata"
      else
        PROF=".build/debug/codecov/default.profdata"
      fi
      if swift test --show-test-binary-path >/dev/null 2>&1; then
        TEST_BIN=$(swift test --show-test-binary-path)
      else
        TEST_BIN=$(find .build -type f -name '*Tests' -perm -111 2>/dev/null | head -n1)
      fi
      xcrun llvm-cov show "$TEST_BIN" -instr-profile "$PROF" \
        -format=html -output-dir coverage-html
    displayName: "Generate HTML coverage (optional)"

  - task: PublishPipelineArtifact@1
    displayName: "Publish coverage HTML (optional)"
    inputs:
      targetPath: 'coverage-html'
      artifact: 'coverage-html'
    condition: succeededOrFailed()

  # ---- SonarQube Cloud block stays excluded while SONAR_ENABLED == 'false' ----
  - ${{ if eq(variables['SONAR_ENABLED'], 'true') }}:
    - task: SonarCloudPrepare@2
      displayName: "SonarCloud | Prepare analysis"
      inputs:
        SonarCloud: '$(SONARQ_ENDPOINT)'   # must match the service connection name
        organization: '$(SONAR_ORG)'
        scannerMode: 'CLI'
        configMode: 'file'
        cliProjectKey: '$(SONAR_PROJECT_KEY)'
        cliProjectName: '$(SONAR_PROJECT_NAME)'

    - task: SonarCloudAnalyze@2
      displayName: "SonarCloud | Run analysis"

    - task: SonarCloudPublish@2
      displayName: "SonarCloud | Publish Quality Gate"
      inputs:
        pollingTimeoutSec: '300'
  # ----------------------------------------------------------------------

  - script: |
      set -euo pipefail
      echo "Building package in release mode…"
      swift build -c "$(CONFIG)"
    displayName: "Build package (release)"
    condition: succeeded()   # only if tests passed

  - script: |
      set -euo pipefail
      echo "Packaging source artifact…"
      rm -rf dist && mkdir -p dist/pkg

      cp -a Package.swift dist/pkg/
      [ -f Package.resolved ] && cp Package.resolved dist/pkg/ || true
      [ -d Sources ] && cp -a Sources dist/pkg/ || true
      [ -f README.md ] && cp README.md dist/pkg/ || true
      [ -f LICENSE ] && cp LICENSE dist/pkg/ || true
      [ -f coverage.lcov ] && cp coverage.lcov dist/pkg/ || true

      SHORT="${BUILD_SOURCEVERSION:0:7}"
      BRANCH="${BUILD_SOURCEBRANCHNAME//\//-}"
      pushd dist >/dev/null
      zip -rq "AuthPackage_src_${BRANCH}_v$(PACKAGE_VERSION)_${SHORT}.zip" pkg
      popd >/dev/null

      echo "Created dist/AuthPackage_src_${BRANCH}_v$(PACKAGE_VERSION)_${SHORT}.zip"
    displayName: "Create source artifact (.zip)"
    condition: succeeded()

  - task: PublishPipelineArtifact@1
    displayName: "Publish artifact: AuthPackage (source zip)"
    condition: succeeded()
    inputs:
      targetPath: 'dist'
      artifact: 'AuthPackage'

  # -------- publish to Azure Artifacts feed (Universal Package) --------
  - task: UniversalPackages@0
    displayName: "Artifacts feed: publish Universal Package v$(PACKAGE_VERSION)"
    condition: succeeded()
    inputs:
      command: publish
      publishDirectory: 'dist/pkg'
      feedsToUse: internal
      vstsFeedPublish: '$(FEED_PATH)'
      vstsFeedPackagePublish: '$(PACKAGE_NAME)'
      versionOption: custom
      versionPublish: '$(PACKAGE_VERSION)'
      packagePublishDescription: 'AuthPackage source + coverage from $(Build.SourceVersion)'
